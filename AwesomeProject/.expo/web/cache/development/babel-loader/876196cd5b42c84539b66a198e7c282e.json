{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useNavigation } from '@react-navigation/native';\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport React, { useState, useEffect } from 'react';\nimport styles from \"./styles\";\nimport PlaceRow from \"./PlaceRow\";\nimport Entypo from \"@expo/vector-icons/Entypo\";\nimport Icon from \"@expo/vector-icons/MaterialCommunityIcons\";\nimport DatePicker from \"react-native-datepicker\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar myIcon = _jsx(Icon, {\n  name: \"calendar-check-outline\",\n  size: 30,\n  color: \"black\"\n});\n\nvar ScheduleSearch = function ScheduleSearch() {\n  var navigation = useNavigation();\n\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      originPlace = _useState4[0],\n      setOriginPlace = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      destinationPlace = _useState6[0],\n      setDestinationPlace = _useState6[1];\n\n  var checkNavigation = function checkNavigation() {\n    if (originPlace && destinationPlace) {\n      navigation.navigate('SearchResults', {\n        originPlace: originPlace,\n        destinationPlace: destinationPlace,\n        date: date\n      });\n    }\n  };\n\n  useEffect(function () {\n    checkNavigation();\n  }, [originPlace, destinationPlace]);\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: [styles.nowView, {\n          width: 120\n        }],\n        children: [_jsxs(Text, {\n          children: [myIcon, \" \"]\n        }), _jsx(Text, {\n          style: styles.now,\n          children: \"Schedule\"\n        })]\n      }), _jsx(Text, {\n        style: [styles.selectText, {\n          width: 350\n        }],\n        children: \"Select Date, Pick-up & destination Location\"\n      }), _jsxs(View, {\n        style: styles.container,\n        children: [_jsxs(View, {\n          style: {\n            flexDirection: 'row',\n            alignItems: 'center',\n            paddingLeft: 10\n          },\n          children: [_jsx(Text, {\n            style: {\n              fontSize: 20\n            },\n            children: \" Select Date\"\n          }), _jsx(DatePicker, {\n            style: styles.datePickerStyle,\n            date: date,\n            mode: \"date\",\n            placeholder: \"select date\",\n            format: \"DD-MM-YYYY\",\n            minDate: new Date(),\n            confirmBtnText: \"Confirm\",\n            cancelBtnText: \"Cancel\",\n            customStyles: {\n              dateIcon: {\n                position: \"absolute\",\n                left: 15,\n                top: 2,\n                marginLeft: 0\n              },\n              dateInput: {\n                width: \"100%\",\n                fontSize: 20,\n                color: \"#101010\",\n                backgroundColor: \"#eee\",\n                borderColor: \"#fff\",\n                height: 48\n              }\n            },\n            onDateChange: function onDateChange(date) {\n              setDate(date);\n            }\n          })]\n        }), _jsx(GooglePlacesAutocomplete, {\n          placeholder: \"From\",\n          onPress: function onPress(data) {\n            var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            setOriginPlace({\n              data: data,\n              details: details\n            });\n            console.log(data, details);\n          },\n          suppressDefaultStyles: true,\n          styles: {\n            separator: styles.separator,\n            textInput: styles.textInput,\n            container: {\n              position: 'absolute',\n              top: 60,\n              right: 10,\n              width: '88%'\n            },\n            listView: {\n              position: 'absolute',\n              top: 118\n            }\n          },\n          fetchDetails: true,\n          query: {\n            key: 'AIzaSyAGXSUtb0RGrt4V55SXW5ZV9n5Z4xuVd7w',\n            language: 'en'\n          },\n          renderRow: function renderRow(data) {\n            return _jsx(PlaceRow, {\n              data: data\n            });\n          }\n        }), _jsx(GooglePlacesAutocomplete, {\n          placeholder: \"Where To\",\n          onPress: function onPress(data) {\n            var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            setDestinationPlace({\n              data: data,\n              details: details\n            });\n            console.log(data, details);\n          },\n          suppressDefaultStyles: true,\n          styles: {\n            separator: styles.separator,\n            textInput: styles.textInput,\n            container: {\n              position: 'absolute',\n              top: 120,\n              right: 10,\n              width: '88%'\n            }\n          },\n          fetchDetails: true,\n          query: {\n            key: 'AIzaSyAGXSUtb0RGrt4V55SXW5ZV9n5Z4xuVd7w',\n            language: 'en'\n          },\n          renderRow: function renderRow(data) {\n            return _jsx(PlaceRow, {\n              data: data\n            });\n          }\n        }), _jsx(View, {\n          style: [styles.circle, {\n            top: 70\n          }],\n          children: _jsx(Entypo, {\n            name: \"location-pin\",\n            size: 20,\n            color: 'white'\n          })\n        }), _jsx(View, {\n          style: [styles.line, {\n            top: 96,\n            height: 42\n          }]\n        }), _jsx(View, {\n          style: [styles.circle, {\n            top: 140,\n            backgroundColor: '#00acc1'\n          }],\n          children: _jsx(Entypo, {\n            name: \"location-pin\",\n            size: 20,\n            color: 'white'\n          })\n        })]\n      })]\n    })\n  });\n};\n\nexport default ScheduleSearch;","map":{"version":3,"sources":["C:/Users/codetribe/Documents/GitHub/moveapp/awesomeproject/src/screen/SearchScreen/ScheduleSearch.js"],"names":["useNavigation","GooglePlacesAutocomplete","React","useState","useEffect","styles","PlaceRow","Entypo","Icon","DatePicker","myIcon","ScheduleSearch","navigation","Date","date","setDate","originPlace","setOriginPlace","destinationPlace","setDestinationPlace","checkNavigation","navigate","flex","container","nowView","width","now","selectText","flexDirection","alignItems","paddingLeft","fontSize","datePickerStyle","dateIcon","position","left","top","marginLeft","dateInput","color","backgroundColor","borderColor","height","data","details","console","log","separator","textInput","right","listView","key","language","circle","line"],"mappings":"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","sourcesContent":["import { useNavigation } from '@react-navigation/native';\r\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\r\nimport { View, Text,SafeAreaView  } from 'react-native'\r\nimport React,{useState, useEffect} from 'react'\r\nimport styles from './styles';\r\nimport PlaceRow from \"./PlaceRow\";\r\nimport Entypo from \"react-native-vector-icons/Entypo\";\r\nimport Icon from 'react-native-vector-icons/MaterialCommunityIcons';\r\n\r\nimport DatePicker from \"react-native-datepicker\";\r\n\r\nconst myIcon = <Icon name=\"calendar-check-outline\" size={30} color=\"black\"/>\r\n\r\nconst ScheduleSearch = () => {\r\n\r\n  const navigation = useNavigation();\r\n  const [date, setDate] = useState(new Date());\r\n  const [originPlace, setOriginPlace] = useState(null);\r\n  const [destinationPlace, setDestinationPlace] = useState(null);\r\n\r\n\r\n\r\n\r\n  const checkNavigation = () => {\r\n    if (originPlace && destinationPlace) {\r\n      navigation.navigate('SearchResults', {\r\n        originPlace,\r\n        destinationPlace,\r\n        date\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkNavigation();\r\n  }, [originPlace, destinationPlace]);\r\n\r\n\r\n  return (\r\n    <SafeAreaView style={{flex:1}}>\r\n    <View style={styles.container}>\r\n<View style={[styles.nowView,{width:120}]}>\r\n  <Text>{myIcon} </Text>\r\n<Text style={styles.now}>Schedule</Text>\r\n</View>\r\n<Text style={[styles.selectText,{width:350}]}>Select Date, Pick-up & destination Location</Text>\r\n\r\n\r\n<View style={styles.container}>\r\n<View style={{flexDirection:'row', alignItems:'center',paddingLeft:10}}>\r\n    <Text style={{fontSize:20}}> Select Date</Text>\r\n<DatePicker\r\n                style={styles.datePickerStyle}\r\n                date={date} //initial date from state\r\n                mode=\"date\" //The enum of date, datetime and time\r\n                placeholder=\"select date\"\r\n                format=\"DD-MM-YYYY\"\r\n                minDate={new Date()}\r\n                confirmBtnText=\"Confirm\"\r\n                cancelBtnText=\"Cancel\"\r\n                customStyles={{\r\n                    dateIcon: {\r\n                        position: \"absolute\",\r\n                        left: 15,\r\n                        top: 2,\r\n                        marginLeft: 0,\r\n                      },\r\n\r\n                  dateInput: {\r\n                    width: \"100%\",\r\n                    fontSize: 20,\r\n                    color: \"#101010\",\r\n                    backgroundColor: \"#eee\",\r\n                    borderColor: \"#fff\",\r\n                    height:48\r\n                  },\r\n                }}\r\n                onDateChange={(date) => {\r\n                  setDate(date);\r\n                }}\r\n              />\r\n\r\n</View>\r\n\r\n\r\n        <GooglePlacesAutocomplete\r\n      placeholder='From'\r\n      onPress={(data, details = null) => {\r\n        setOriginPlace({data , details})\r\n        console.log(data, details);\r\n      }}\r\n      suppressDefaultStyles\r\n\r\n      styles={{\r\n        separator: styles.separator,\r\n        textInput:styles.textInput,\r\n        container:{\r\n          position:'absolute',\r\n          top:60,\r\n          right:10,\r\n          width:'88%'\r\n               },\r\n               listView:{\r\n                position:'absolute',\r\n                top:118,\r\n              }    \r\n\r\n      }}\r\n\r\n      fetchDetails\r\n      query={{\r\n        key: 'AIzaSyAGXSUtb0RGrt4V55SXW5ZV9n5Z4xuVd7w',\r\n        language: 'en',\r\n      }}\r\n      renderRow={(data) => <PlaceRow data={data} />}\r\n\r\n    />\r\n\r\n <GooglePlacesAutocomplete\r\n      placeholder='Where To'\r\n      onPress={(data, details = null) => {\r\n        setDestinationPlace({data , details})\r\n        console.log(data, details);\r\n      }}\r\n      suppressDefaultStyles\r\n\r\n      \r\n\r\n      styles={{\r\n        separator: styles.separator,\r\n        textInput:styles.textInput,\r\n        container:{\r\n          position:'absolute',\r\n          top:120,\r\n          right:10,\r\n          width:'88%'\r\n               },\r\n\r\n          // listView:{\r\n          //   position:'absolute',\r\n          //   top:105,\r\n          // }     \r\n\r\n      }}\r\n\r\n\r\n      fetchDetails\r\n      query={{\r\n        key: 'AIzaSyAGXSUtb0RGrt4V55SXW5ZV9n5Z4xuVd7w',\r\n        language: 'en',\r\n      }}\r\n      renderRow={(data) => <PlaceRow data={data} />}\r\n\r\n    /> \r\n\r\n\r\n   <View style={[styles.circle,{top:70}]} >\r\n     <Entypo name='location-pin' size={20} color={'white'} />\r\n      </View> \r\n   <View style={[styles.line,{top:96, height:42}]}/> \r\n   <View style={[styles.circle,{top:140,backgroundColor:'#00acc1'}]} >\r\n      <Entypo name='location-pin' size={20} color={'white'} />\r\n   </View> \r\n\r\n</View>\r\n\r\n    </View>\r\n    </SafeAreaView>\r\n  )\r\n}\r\n\r\nexport default ScheduleSearch;"]},"metadata":{},"sourceType":"module"}