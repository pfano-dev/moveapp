{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useNavigation } from '@react-navigation/native';\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport React, { useState, useEffect } from 'react';\nimport styles from \"./styles\";\nimport Icon from \"@expo/vector-icons/Feather\";\nimport PlaceRow from \"./PlaceRow\";\nimport Entypo from \"@expo/vector-icons/Entypo\";\nimport * as Location from 'expo-location';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar myIcon = _jsx(Icon, {\n  name: \"clock\",\n  size: 30,\n  color: \"black\"\n});\n\nvar SearchScreen = function SearchScreen() {\n  var _useState = useState({\n    coords: {\n      accuracy: 899.9990234375,\n      altitude: 0,\n      altitudeAccuracy: 0,\n      heading: 0,\n      latitude: -25.7159813,\n      longitude: 28.360622,\n      speed: 0\n    }\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      location = _useState2[0],\n      setLocation = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      errorMsg = _useState4[0],\n      setErrorMsg = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Location$reque, status, location;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Location.requestForegroundPermissionsAsync());\n\n            case 2:\n              _await$Location$reque = _context.sent;\n              status = _await$Location$reque.status;\n\n              if (!(status !== 'granted')) {\n                _context.next = 7;\n                break;\n              }\n\n              setErrorMsg('Permission to access location was denied');\n              return _context.abrupt(\"return\");\n\n            case 7:\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(Location.getCurrentPositionAsync({}));\n\n            case 9:\n              location = _context.sent;\n              setLocation(location);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  var text = 'Waiting..';\n\n  if (errorMsg) {\n    text = errorMsg;\n  } else if (location) {\n    text = JSON.stringify(location);\n  }\n\n  console.log(location.coords.latitude);\n  console.log(location.coords.longitude);\n  var navigation = useNavigation();\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      originPlace = _useState6[0],\n      setOriginPlace = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      destinationPlace = _useState8[0],\n      setDestinationPlace = _useState8[1];\n\n  var homePlace = {\n    description: 'current location',\n    geometry: {\n      location: {\n        lat: location.coords.latitude,\n        lng: location.coords.longitude\n      }\n    }\n  };\n  var workPlace = {\n    description: 'Home',\n    geometry: {\n      location: {\n        lat: 48.8496818,\n        lng: 2.2940881\n      }\n    }\n  };\n\n  var checkNavigation = function checkNavigation() {\n    if (originPlace && destinationPlace) {\n      navigation.navigate('SearchResults', {\n        originPlace: originPlace,\n        destinationPlace: destinationPlace\n      });\n    }\n  };\n\n  useEffect(function () {\n    checkNavigation();\n  }, [originPlace, destinationPlace]);\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsxs(View, {\n      style: styles.container,\n      children: [_jsxs(View, {\n        style: styles.nowView,\n        children: [_jsxs(Text, {\n          children: [myIcon, \" \"]\n        }), _jsx(Text, {\n          style: styles.now,\n          children: \"Now\"\n        })]\n      }), _jsx(Text, {\n        style: styles.selectText,\n        children: \"Select Pick-up & destination Location\"\n      }), _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(GooglePlacesAutocomplete, {\n          placeholder: \"Search\",\n          onPress: function onPress(data) {\n            var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            setOriginPlace({\n              data: data,\n              details: details\n            });\n          },\n          suppressDefaultStyles: true,\n          styles: {\n            separator: styles.separator,\n            textInput: styles.textInput,\n            container: {\n              position: 'absolute',\n              top: 0,\n              right: 10,\n              width: '88%'\n            },\n            listView: {\n              position: 'absolute',\n              top: 118\n            }\n          },\n          fetchDetails: true,\n          query: {\n            key: 'AIzaSyAGXSUtb0RGrt4V55SXW5ZV9n5Z4xuVd7w',\n            language: 'en'\n          },\n          renderRow: function renderRow(data) {\n            return _jsx(PlaceRow, {\n              data: data\n            });\n          },\n          renderDescription: function renderDescription(data) {\n            return data.description || data.vicinity;\n          },\n          predefinedPlaces: [homePlace, workPlace]\n        }), _jsx(GooglePlacesAutocomplete, {\n          placeholder: \"Where To\",\n          onPress: function onPress(data) {\n            var details = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            setDestinationPlace({\n              data: data,\n              details: details\n            });\n          },\n          suppressDefaultStyles: true,\n          styles: {\n            separator: styles.separator,\n            textInput: styles.textInput,\n            container: {\n              position: 'absolute',\n              top: 60,\n              right: 10,\n              width: '88%'\n            }\n          },\n          fetchDetails: true,\n          query: {\n            key: 'AIzaSyAGXSUtb0RGrt4V55SXW5ZV9n5Z4xuVd7w',\n            language: 'en'\n          },\n          renderRow: function renderRow(data) {\n            return _jsx(PlaceRow, {\n              data: data\n            });\n          }\n        }), _jsx(View, {\n          style: styles.circle,\n          children: _jsx(Entypo, {\n            name: \"location-pin\",\n            size: 20,\n            color: 'white'\n          })\n        }), _jsx(View, {\n          style: styles.line\n        }), _jsx(View, {\n          style: [styles.circle, {\n            top: 88,\n            backgroundColor: '#00acc1'\n          }],\n          children: _jsx(Entypo, {\n            name: \"location-pin\",\n            size: 20,\n            color: 'white'\n          })\n        })]\n      })]\n    })\n  });\n};\n\nexport default SearchScreen;","map":{"version":3,"sources":["C:/Users/codetribe/Documents/GitHub/moveapp/awesomeproject/src/screen/SearchScreen/index.js"],"names":["useNavigation","GooglePlacesAutocomplete","React","useState","useEffect","styles","Icon","PlaceRow","Entypo","Location","myIcon","SearchScreen","coords","accuracy","altitude","altitudeAccuracy","heading","latitude","longitude","speed","location","setLocation","errorMsg","setErrorMsg","requestForegroundPermissionsAsync","status","getCurrentPositionAsync","text","JSON","stringify","console","log","navigation","originPlace","setOriginPlace","destinationPlace","setDestinationPlace","homePlace","description","geometry","lat","lng","workPlace","checkNavigation","navigate","flex","container","nowView","now","selectText","data","details","separator","textInput","position","top","right","width","listView","key","language","vicinity","circle","line","backgroundColor"],"mappings":"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","sourcesContent":["import { useNavigation } from '@react-navigation/native';\r\nimport { GooglePlacesAutocomplete } from 'react-native-google-places-autocomplete';\r\nimport { View, Text,SafeAreaView  } from 'react-native'\r\nimport React,{useState, useEffect} from 'react'\r\nimport styles from './styles';\r\nimport Icon from 'react-native-vector-icons/Feather';\r\nimport PlaceRow from \"./PlaceRow\";\r\nimport Entypo from \"react-native-vector-icons/Entypo\";\r\nimport * as Location from 'expo-location';\r\n\r\nconst myIcon = <Icon name=\"clock\" size={30} color=\"black\"/>\r\n\r\nconst SearchScreen = () => {\r\n\r\n \r\n  const [location, setLocation] = useState(\r\n\r\n {   coords:{\r\n      accuracy: 899.9990234375,\r\n      altitude: 0,\r\n      altitudeAccuracy: 0,\r\n      heading: 0,\r\n      latitude: -25.7159813,\r\n      longitude: 28.360622,\r\n      speed: 0,\r\n    },\r\n}\r\n  );\r\n  const [errorMsg, setErrorMsg] = useState(null);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      let { status } = await Location.requestForegroundPermissionsAsync();\r\n      if (status !== 'granted') {\r\n        setErrorMsg('Permission to access location was denied');\r\n        return;\r\n      }\r\n\r\n      let location = await Location.getCurrentPositionAsync({});\r\n      setLocation(location);\r\n\r\n  \r\n    })();\r\n  }, []);\r\n\r\n  let text = 'Waiting..';\r\n  if (errorMsg) {\r\n    text = errorMsg;\r\n  } else if (location) {\r\n    text = JSON.stringify(location);\r\n  }\r\n\r\n  console.log(location.coords.latitude)\r\n  console.log(location.coords.longitude)\r\n\r\n\r\n  const navigation = useNavigation();\r\n\r\n  const [originPlace, setOriginPlace] = useState(null);\r\n  const [destinationPlace, setDestinationPlace] = useState(null);\r\n\r\n  const homePlace = {\r\n    description: 'current location',\r\n    geometry: { location: { lat:location.coords.latitude, lng:location.coords.longitude} },\r\n  };\r\n  const workPlace = {\r\n    description: 'Home',\r\n    geometry: { location: { lat: 48.8496818, lng: 2.2940881 } },\r\n  };\r\n\r\n\r\n\r\n  const checkNavigation = () => {\r\n    if (originPlace && destinationPlace) {\r\n      navigation.navigate('SearchResults', {\r\n        originPlace,\r\n        destinationPlace,\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    checkNavigation();\r\n  }, [originPlace, destinationPlace]);\r\n\r\n\r\n  return (\r\n    <SafeAreaView style={{flex:1}}>\r\n    <View style={styles.container}>\r\n<View style={styles.nowView}>\r\n  <Text>{myIcon} </Text>\r\n<Text style={styles.now}>Now</Text>\r\n</View>\r\n<Text style={styles.selectText}>Select Pick-up & destination Location</Text>\r\n\r\n\r\n<View style={styles.container}>\r\n        <GooglePlacesAutocomplete\r\n      placeholder='Search'\r\n      onPress={(data, details = null) => {\r\n        setOriginPlace({data , details})\r\n     \r\n      }}\r\n      suppressDefaultStyles\r\n      styles={{\r\n        separator: styles.separator,\r\n        textInput:styles.textInput,\r\n        container:{\r\n          position:'absolute',\r\n          top:0,\r\n          right:10,\r\n          width:'88%'\r\n               },\r\n               listView:{\r\n                position:'absolute',\r\n                top:118,\r\n              }    \r\n\r\n      }}\r\n\r\n      fetchDetails\r\n      query={{\r\n        key: 'AIzaSyAGXSUtb0RGrt4V55SXW5ZV9n5Z4xuVd7w',\r\n        language: 'en',\r\n      }}\r\n      renderRow={(data) => <PlaceRow data={data} />}\r\n      renderDescription={(data) => data.description || data.vicinity}\r\n      predefinedPlaces={[homePlace, workPlace]}\r\n    />\r\n\r\n <GooglePlacesAutocomplete\r\n      placeholder='Where To'\r\n      onPress={(data, details = null) => {\r\n        setDestinationPlace({data , details})\r\n      \r\n      }}\r\n      suppressDefaultStyles\r\n\r\n      \r\n\r\n      styles={{\r\n        separator: styles.separator,\r\n        textInput:styles.textInput,\r\n        container:{\r\n          position:'absolute',\r\n          top:60,\r\n          right:10,\r\n          width:'88%'\r\n               },\r\n\r\n          // listView:{\r\n          //   position:'absolute',\r\n          //   top:105,\r\n          // }     \r\n\r\n      }}\r\n\r\n\r\n      fetchDetails\r\n      query={{\r\n        key: 'AIzaSyAGXSUtb0RGrt4V55SXW5ZV9n5Z4xuVd7w',\r\n        language: 'en',\r\n      }}\r\n      renderRow={(data) => <PlaceRow data={data} />}\r\n\r\n    /> \r\n\r\n\r\n   <View style={styles.circle} >\r\n     <Entypo name='location-pin' size={20} color={'white'} />\r\n      </View> \r\n   <View style={styles.line}/> \r\n   <View style={[styles.circle,{top:88,backgroundColor:'#00acc1'}]} >\r\n      <Entypo name='location-pin' size={20} color={'white'} />\r\n   </View> \r\n\r\n</View>\r\n\r\n    </View>\r\n    </SafeAreaView>\r\n  )\r\n}\r\n\r\nexport default SearchScreen;"]},"metadata":{},"sourceType":"module"}