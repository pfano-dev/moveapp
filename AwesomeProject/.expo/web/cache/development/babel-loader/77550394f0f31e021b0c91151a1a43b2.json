{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport typesData from \"../../assets/data/types\";\nimport CarTypeRow from \"../CarTypeRow\";\nimport { useNavigation } from '@react-navigation/native';\nimport React, { useState, useRef } from 'react';\nimport MapView, { PROVIDER_GOOGLE, Marker } from 'react-native-maps';\nimport MapViewDirections from \"react-native-maps-directions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar GOOGLE_MAPS_APIKEY = \"AIzaSyAGXSUtb0RGrt4V55SXW5ZV9n5Z4xuVd7w\";\n\nvar CarType = function CarType(_ref) {\n  var origins = _ref.origins,\n      destinations = _ref.destinations,\n      origin = _ref.origin,\n      destination = _ref.destination,\n      date = _ref.date;\n  var navigation = useNavigation();\n\n  var _useState = useState({\n    time: 0,\n    distance: 0\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var time = state.time,\n      distance = state.distance;\n  var mapRef = useRef();\n  var lati = origin.details.geometry.location.lat;\n  var longi = origin.details.geometry.location.lng;\n  var originLoc = {\n    latitude: origin.details.geometry.location.lat,\n    longitude: origin.details.geometry.location.lng\n  };\n  var destinationLoc = {\n    latitude: destination.details.geometry.location.lat,\n    longitude: destination.details.geometry.location.lng\n  };\n\n  var fetchTime = function fetchTime(d, t) {\n    setState({\n      distance: d,\n      time: t\n    });\n  };\n\n  console.log(distance);\n  return _jsxs(View, {\n    style: {\n      backgroundColor: 'white'\n    },\n    children: [_jsxs(MapView, {\n      ref: mapRef,\n      style: {\n        height: 500,\n        width: '100%'\n      },\n      initialRegion: {\n        latitude: -26.270760,\n        longitude: 28.112268,\n        latitudeDelta: 0.0922,\n        longitudeDelta: 0.0421\n      },\n      children: [_jsx(Marker, {\n        coordinate: originLoc,\n        title: \"Origin\",\n        pinColor: '#00acc1'\n      }), _jsx(Marker, {\n        coordinate: destinationLoc,\n        title: \"Destination\",\n        pinColor: 'orange'\n      }), _jsx(MapViewDirections, {\n        origin: originLoc,\n        destination: destinationLoc,\n        apikey: GOOGLE_MAPS_APIKEY,\n        strokeWidth: 5,\n        strokeColor: \"#64b5f6\",\n        onReady: function onReady(result) {\n          var dist = result.distance;\n          fetchTime(result.distance, result.duration), mapRef.current.fitToCoordinates(result.coordinates, {\n            edgePadding: {\n              right: 10,\n              bottom: 10,\n              left: 10,\n              top: 30\n            }\n          });\n        }\n      })]\n    }), _jsxs(Text, {\n      style: {\n        backgroundColor: 'white',\n        textAlign: 'center'\n      },\n      children: [\"Distance : \", distance, \" km\"]\n    }), _jsx(View, {\n      style: {\n        backgroundColor: 'white'\n      },\n      children: typesData.map(function (type) {\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate(\"ConfimScreen\", {\n              type: type,\n              origins: origins,\n              destinations: destinations,\n              date: date,\n              distance: distance,\n              originLoc: originLoc,\n              destinationLoc: destinationLoc\n            });\n          },\n          children: _jsx(CarTypeRow, {\n            type: type,\n            distance: distance\n          }, type.id)\n        }, type.id);\n      })\n    })]\n  });\n};\n\nexport default CarType;","map":{"version":3,"sources":["C:/Users/codetribe/Documents/GitHub/moveapp/awesomeproject/src/component/CarType/index.js"],"names":["typesData","CarTypeRow","useNavigation","React","useState","useRef","MapView","PROVIDER_GOOGLE","Marker","MapViewDirections","GOOGLE_MAPS_APIKEY","CarType","origins","destinations","origin","destination","date","navigation","time","distance","state","setState","mapRef","lati","details","geometry","location","lat","longi","lng","originLoc","latitude","longitude","destinationLoc","fetchTime","d","t","console","log","backgroundColor","height","width","latitudeDelta","longitudeDelta","result","dist","duration","current","fitToCoordinates","coordinates","edgePadding","right","bottom","left","top","textAlign","map","type","navigate","id"],"mappings":"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","sourcesContent":["import { View, Text,TouchableOpacity } from 'react-native'\r\nimport typesData from '../../assets/data/types'\r\nimport CarTypeRow from '../CarTypeRow'\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport React,{useState , useRef} from 'react';\r\nimport MapView , { PROVIDER_GOOGLE, Marker } from 'react-native-maps';\r\nimport MapViewDirections from \"react-native-maps-directions\";\r\n\r\nconst GOOGLE_MAPS_APIKEY = \"AIzaSyAGXSUtb0RGrt4V55SXW5ZV9n5Z4xuVd7w\";\r\n\r\n\r\n\r\n\r\n\r\nconst CarType = ({origins, destinations, origin, destination, date}) => {\r\n  const navigation = useNavigation();\r\n\r\n\r\n  const [state, setState] = useState({\r\n    time: 0,\r\n    distance: 0,\r\n})\r\n\r\nconst {  time, distance } = state\r\n\r\n  const mapRef = useRef()\r\n\r\n\r\n\r\n  const lati = origin.details.geometry.location.lat;\r\n  const longi = origin.details.geometry.location.lng;\r\n\r\n  const originLoc = {\r\n    latitude: origin.details.geometry.location.lat,\r\n    longitude: origin.details.geometry.location.lng,\r\n  };\r\n\r\n  const destinationLoc = {\r\n    latitude: destination.details.geometry.location.lat,\r\n    longitude: destination.details.geometry.location.lng,\r\n  };\r\n\r\n\r\n const fetchTime = (d, t) => {\r\n    setState({\r\n        distance: d,\r\n        time: t\r\n    })\r\n}\r\n\r\nconsole.log(distance)\r\n\r\n// const distan =  type.price*distance\r\n\r\n// const distances = parseInt(distan, 10)\r\n\r\n\r\n\r\n  return (\r\n    <View style={{backgroundColor:'white'}}>\r\n\r\n\r\n<MapView\r\n\r\n    ref={mapRef}\r\n    style={{height:500, width:'100%'}}\r\n    initialRegion={{\r\n      latitude: -26.270760,\r\n      longitude: 28.112268,\r\n      latitudeDelta: 0.0922,\r\n      longitudeDelta: 0.0421,\r\n    }}\r\n  >\r\n\r\n\r\n\r\n<Marker coordinate={originLoc} title={\"Origin\"} pinColor={'#00acc1'} />\r\n\r\n  \r\n    \r\n     \r\n      <Marker coordinate={destinationLoc} title={\"Destination\"} pinColor={'orange'} />\r\n\r\n      <MapViewDirections\r\n        origin={originLoc}\r\n        destination={destinationLoc}\r\n        apikey={GOOGLE_MAPS_APIKEY}\r\n        strokeWidth={5}\r\n        strokeColor=\"#64b5f6\"\r\n\r\n        onReady={result => {\r\n\r\n\r\nconst dist = result.distance;\r\n       \r\n\r\n          fetchTime(result.distance, result.duration),\r\n\r\n              mapRef.current.fitToCoordinates(result.coordinates, {\r\n                  edgePadding: {\r\n                      right: 10,\r\n                      bottom: 10,\r\n                      left: 10,\r\n                      top: 30,\r\n                  },\r\n              });\r\n      }}\r\n    \r\n\r\n      />\r\n\r\n  </MapView>\r\n  <Text style={{backgroundColor:'white', textAlign:'center'}}>Distance : {distance} km</Text>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    <View style={{backgroundColor:'white'}}>\r\n      {typesData.map((type) => (\r\n\r\n<TouchableOpacity\r\nonPress={() => navigation.navigate(\"ConfimScreen\",{type,origins,destinations,date,distance,originLoc,destinationLoc})}\r\nkey={type.id}\r\n>\r\n        <CarTypeRow\r\n          type={type}\r\n          key={type.id}\r\n        distance={distance}\r\n        />\r\n         </TouchableOpacity>\r\n      ))}\r\n\r\n\r\n    </View>\r\n\r\n    </View>\r\n  )\r\n}\r\n\r\nexport default CarType;"]},"metadata":{},"sourceType":"module"}